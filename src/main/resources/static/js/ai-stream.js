/**
 * AIÊµÅÂºèÂ§ÑÁêÜÈÄöÁî®Â∫ì
 * ÊîØÊåÅOllamaÂíåDeepSeekÁöÑÊµÅÂºè‰∫§‰∫í
 * ‰ΩúËÄÖÔºöËè©ÊèêÊ†ë‰∏ãÁöÑÊù®Ëøá
 * ÊÑüË∞¢CursorÁîüÊàêÊú¨È°πÁõÆ‰ª£Á†Å
 */

class AIStreamHandler {
    constructor(options = {}) {
        this.options = {
            // ÈªòËÆ§ÈÖçÁΩÆ
            endpoint: '/chat/stream',
            messageParam: 'message',
            onMessage: null,
            onError: null,
            onComplete: null,
            onStart: null,
            onEnd: null,
            // UIÂÖÉÁ¥†ÈÖçÁΩÆ
            sendButton: null,
            statusElement: null,
            typingIndicator: null,
            resultContainer: null,
            resultContent: null,
            // ÊåâÈíÆÁä∂ÊÄÅÈÖçÁΩÆ
            buttonTexts: {
                default: 'ÂèëÈÄÅ',
                loading: 'ÂèëÈÄÅ‰∏≠...',
                translate: 'üîÑ ÂºÄÂßãÁøªËØë',
                translating: 'ÁøªËØë‰∏≠...',
                query: 'üîç Êü•ËØ¢Â§©Ê∞î',
                querying: 'Êü•ËØ¢‰∏≠...'
            },
            // Áä∂ÊÄÅÊñáÊú¨ÈÖçÁΩÆ
            statusTexts: {
                connecting: 'Ê≠£Âú®ËøûÊé•...',
                connected: 'ËøûÊé•ÊàêÂäüÔºåÊ≠£Âú®Êé•Êî∂ÂõûÂ§ç...',
                error: 'ËøûÊé•ÈîôËØØÔºåËØ∑ÈáçËØï',
                complete: 'Â§ÑÁêÜÂÆåÊàê'
            },
            // Ëá™Âä®ÊªöÂä®ÈÖçÁΩÆ
            autoScroll: true,
            scrollContainer: null,
            // Ê∂àÊÅØÂ§ÑÁêÜÈÖçÁΩÆ
            messageCounter: 0,
            enableMessageCounter: false,
            // Á©∫Ê†ºÂ§ÑÁêÜÈÖçÁΩÆ
            smartSpaceHandling: true,
            // ÈîôËØØÂ§ÑÁêÜÈÖçÁΩÆ
            showErrorInResult: true,
            errorMessage: 'Â§ÑÁêÜÂ§±Ë¥•ÔºåËØ∑ÈáçËØï',
            // Ë∂ÖÊó∂ÈÖçÁΩÆ
            timeout: 30000,
            ...options
        };
        
        this.eventSource = null;
        this.isStreaming = false;
        this.timeoutId = null;
        this.currentMessageId = null;
    }

    /**
     * ÂºÄÂßãÊµÅÂºèÂ§ÑÁêÜ
     * @param {Object} params - ËØ∑Ê±ÇÂèÇÊï∞
     * @param {string} params.message - Ê∂àÊÅØÂÜÖÂÆπÔºàËÅäÂ§©Ôºâ
     * @param {string} params.text - ÊñáÊú¨ÂÜÖÂÆπÔºàÁøªËØëÔºâ
     * @param {string} params.targetLang - ÁõÆÊ†áËØ≠Ë®ÄÔºàÁøªËØëÔºâ
     * @param {string} params.city - ÂüéÂ∏ÇÂêçÁß∞ÔºàÂ§©Ê∞îÔºâ
     * @param {string} customEndpoint - Ëá™ÂÆö‰πâÁ´ØÁÇπ
     */
    startStream(params, customEndpoint = null) {
        if (this.isStreaming) {
            console.log('Ê≠£Âú®ÊµÅÂºè‰º†Ëæì‰∏≠ÔºåÂøΩÁï•Êñ∞ËØ∑Ê±Ç');
            return;
        }

        console.log('ÂºÄÂßãÊµÅÂºè‰º†Ëæì:', params);
        
        this.isStreaming = true;
        this.updateUIState('loading');
        
        // ÂàõÂª∫Ê∂àÊÅØÂÆπÂô®ÔºàÂ¶ÇÊûúÈúÄË¶ÅÔºâ
        if (this.options.enableMessageCounter) {
            this.createMessageContainer();
        }
        
        // ÂÖ≥Èó≠‰πãÂâçÁöÑËøûÊé•
        this.closeConnection();
        
        // ÊûÑÂª∫ËØ∑Ê±ÇURL
        const endpoint = customEndpoint || this.options.endpoint;
        const url = this.buildRequestUrl(endpoint, params);
        console.log('ÂàõÂª∫EventSource:', url);
        
        // ÂàõÂª∫EventSource
        this.eventSource = new EventSource(url);
        this.setupEventListeners();
        
        // ËÆæÁΩÆË∂ÖÊó∂
        this.setupTimeout();
        
        // Ë∞ÉÁî®ÂºÄÂßãÂõûË∞É
        if (this.options.onStart) {
            this.options.onStart(params);
        }
    }

    /**
     * ÊûÑÂª∫ËØ∑Ê±ÇURL
     */
    buildRequestUrl(endpoint, params) {
        const urlParams = new URLSearchParams();
        
        // Ê†πÊçÆÂèÇÊï∞Á±ªÂûãÊûÑÂª∫URL
        if (params.message) {
            urlParams.append(this.options.messageParam, params.message);
        } else if (params.text && params.targetLang) {
            urlParams.append('text', params.text);
            urlParams.append('targetLang', params.targetLang);
        } else if (params.city) {
            urlParams.append('city', params.city);
        }
        
        const queryString = urlParams.toString();
        return queryString ? `${endpoint}?${queryString}` : endpoint;
    }

    /**
     * ËÆæÁΩÆ‰∫ã‰ª∂ÁõëÂê¨Âô®
     */
    setupEventListeners() {
        this.eventSource.onopen = (event) => {
            console.log('EventSourceËøûÊé•Â∑≤ÊâìÂºÄ');
            this.updateStatus(this.options.statusTexts.connected);
            this.hideTypingIndicator();
            this.clearTimeout();
        };

        this.eventSource.onmessage = (event) => {
            console.log('Êî∂Âà∞Ê∂àÊÅØ:', event.data);
            this.handleMessage(event.data);
        };

        this.eventSource.onerror = (event) => {
            console.error('EventSourceÈîôËØØ:', event);
            this.handleError(event);
        };

        // ÁõëÂê¨ÊµÅÁªìÊùü
        this.eventSource.addEventListener('done', (event) => {
            console.log('ÊµÅ‰º†ËæìÂÆåÊàê');
            this.endStream();
        });

        // ÁõëÂê¨ÁøªËØëÂÆåÊàê
        this.eventSource.addEventListener('complete', (event) => {
            console.log('ÁøªËØëÂÆåÊàê');
            this.endStream();
        });
    }

    /**
     * Â§ÑÁêÜÊé•Êî∂Âà∞ÁöÑÊ∂àÊÅØ
     */
    handleMessage(data) {
        // Ë∞ÉÁî®Ëá™ÂÆö‰πâÊ∂àÊÅØÂ§ÑÁêÜÂáΩÊï∞
        if (this.options.onMessage) {
            this.options.onMessage(data, this);
        } else {
            // ÈªòËÆ§Ê∂àÊÅØÂ§ÑÁêÜÈÄªËæë
            this.appendContent(data);
        }
        
        // Ëá™Âä®ÊªöÂä®
        if (this.options.autoScroll) {
            this.scrollToBottom();
        }
    }

    /**
     * ËøΩÂä†ÂÜÖÂÆπÂà∞ÁªìÊûúÂÆπÂô®
     */
    appendContent(content) {
        if (!this.options.resultContent) return;

        if (this.options.smartSpaceHandling) {
            this.appendWithSmartSpacing(content);
        } else {
            this.options.resultContent.textContent += content;
        }
    }

    /**
     * Êô∫ËÉΩÁ©∫Ê†ºÂ§ÑÁêÜ
     */
    appendWithSmartSpacing(newContent) {
        const container = this.options.resultContent;
        const currentText = container.innerText;
        
        // Â¶ÇÊûúÊñ∞ÂÜÖÂÆπ‰ª•Á©∫Ê†ºÂºÄÂ§¥ÔºåÁõ¥Êé•ËøΩÂä†
        if (newContent.startsWith(' ')) {
            container.innerHTML += newContent;
        } else {
            // Ê£ÄÊü•ÊòØÂê¶ÈúÄË¶ÅÊ∑ªÂä†Á©∫Ê†º
            let shouldAddSpace = false;
            if (currentText.length > 0) {
                const lastChar = currentText[currentText.length - 1];
                // Â¶ÇÊûúÊúÄÂêé‰∏Ä‰∏™Â≠óÁ¨¶ÊòØÂ≠óÊØçÊàñÊï∞Â≠óÔºå‰∏îÊñ∞ÂÜÖÂÆπ‰ª•Â§ßÂÜôÂ≠óÊØçÂºÄÂ§¥ÔºåÊ∑ªÂä†Á©∫Ê†º
                if (/[a-zA-Z0-9]/.test(lastChar) && /[A-Z]/.test(newContent[0])) {
                    shouldAddSpace = true;
                }
            }
            
            if (shouldAddSpace) {
                container.innerHTML += ' ' + newContent;
            } else {
                container.innerHTML += newContent;
            }
        }
    }

    /**
     * ÂàõÂª∫Ê∂àÊÅØÂÆπÂô®ÔºàÁî®‰∫éËÅäÂ§©ÂäüËÉΩÔºâ
     */
    createMessageContainer() {
        this.options.messageCounter++;
        this.currentMessageId = `aiResponse_${this.options.messageCounter}`;
        
        const aiMessageDiv = document.createElement('div');
        aiMessageDiv.className = 'message ai';
        
        const aiContentDiv = document.createElement('div');
        aiContentDiv.className = 'message-content';
        aiContentDiv.id = this.currentMessageId;
        aiContentDiv.style.whiteSpace = 'pre-wrap';
        aiContentDiv.textContent = '';
        
        aiMessageDiv.appendChild(aiContentDiv);
        
        // Ê∑ªÂä†Âà∞ËÅäÂ§©ÂÆπÂô®
        const chatMessages = document.getElementById('chatMessages');
        if (chatMessages) {
            chatMessages.appendChild(aiMessageDiv);
            this.scrollToBottom();
        }
    }

    /**
     * Â§ÑÁêÜÈîôËØØ
     */
    handleError(event) {
        this.updateStatus(this.options.statusTexts.error);
        this.hideTypingIndicator();
        
        // ÊòæÁ§∫ÈîôËØØ‰ø°ÊÅØ
        if (this.options.showErrorInResult && this.options.resultContent) {
            this.options.resultContent.textContent += '\n' + this.options.errorMessage;
        }
        
        // Ë∞ÉÁî®ÈîôËØØÂõûË∞É
        if (this.options.onError) {
            this.options.onError(event, this);
        }
        
        this.endStream();
    }

    /**
     * ÁªìÊùüÊµÅÂºè‰º†Ëæì
     */
    endStream() {
        console.log('ÁªìÊùüÊµÅÂºè‰º†Ëæì');
        
        this.closeConnection();
        this.clearTimeout();
        
        this.isStreaming = false;
        this.updateUIState('default');
        this.updateStatus(this.options.statusTexts.complete);
        
        // 3ÁßíÂêéÊ∏ÖÈô§Áä∂ÊÄÅ
        setTimeout(() => {
            this.updateStatus('');
        }, 3000);
        
        // Ë∞ÉÁî®ÁªìÊùüÂõûË∞É
        if (this.options.onEnd) {
            this.options.onEnd();
        }
    }

    /**
     * ÂÖ≥Èó≠ËøûÊé•
     */
    closeConnection() {
        if (this.eventSource) {
            console.log('ÂÖ≥Èó≠EventSourceËøûÊé•');
            this.eventSource.close();
            this.eventSource = null;
        }
    }

    /**
     * ËÆæÁΩÆË∂ÖÊó∂
     */
    setupTimeout() {
        if (this.options.timeout > 0) {
            this.timeoutId = setTimeout(() => {
                console.log('ËØ∑Ê±ÇË∂ÖÊó∂');
                this.handleError({ type: 'timeout' });
            }, this.options.timeout);
        }
    }

    /**
     * Ê∏ÖÈô§Ë∂ÖÊó∂
     */
    clearTimeout() {
        if (this.timeoutId) {
            clearTimeout(this.timeoutId);
            this.timeoutId = null;
        }
    }

    /**
     * Êõ¥Êñ∞UIÁä∂ÊÄÅ
     */
    updateUIState(state) {
        if (!this.options.sendButton) return;
        
        const button = this.options.sendButton;
        const texts = this.options.buttonTexts;
        
        switch (state) {
            case 'loading':
                button.disabled = true;
                button.textContent = texts.loading;
                break;
            case 'translating':
                button.disabled = true;
                button.textContent = texts.translating;
                break;
            case 'querying':
                button.disabled = true;
                button.textContent = texts.querying;
                break;
            case 'default':
            default:
                button.disabled = false;
                button.textContent = texts.default;
                break;
        }
    }

    /**
     * Êõ¥Êñ∞Áä∂ÊÄÅÊñáÊú¨
     */
    updateStatus(text) {
        if (this.options.statusElement) {
            this.options.statusElement.textContent = text;
        }
    }

    /**
     * ÊòæÁ§∫ËæìÂÖ•ÊåáÁ§∫Âô®
     */
    showTypingIndicator() {
        if (this.options.typingIndicator) {
            this.options.typingIndicator.style.display = 'block';
        }
    }

    /**
     * ÈöêËóèËæìÂÖ•ÊåáÁ§∫Âô®
     */
    hideTypingIndicator() {
        if (this.options.typingIndicator) {
            this.options.typingIndicator.style.display = 'none';
        }
    }

    /**
     * ÊªöÂä®Âà∞Â∫ïÈÉ®
     */
    scrollToBottom() {
        const container = this.options.scrollContainer || 
                         document.getElementById('chatMessages') || 
                         this.options.resultContainer;
        
        if (container) {
            container.scrollTop = container.scrollHeight;
        }
    }

    /**
     * Ê∑ªÂä†Ê∂àÊÅØÔºàÁî®‰∫éËÅäÂ§©ÂäüËÉΩÔºâ
     */
    addMessage(content, type = 'user') {
        const chatMessages = document.getElementById('chatMessages');
        if (!chatMessages) return;
        
        const messageDiv = document.createElement('div');
        messageDiv.className = `message ${type}`;
        
        const contentDiv = document.createElement('div');
        contentDiv.className = 'message-content';
        contentDiv.style.whiteSpace = 'pre-wrap';
        contentDiv.innerText = content;
        
        messageDiv.appendChild(contentDiv);
        chatMessages.appendChild(messageDiv);
        
        this.scrollToBottom();
    }

    /**
     * Ëé∑ÂèñÂΩìÂâçÊ∂àÊÅØID
     */
    getCurrentMessageId() {
        return this.currentMessageId;
    }

    /**
     * Ê£ÄÊü•ÊòØÂê¶Ê≠£Âú®ÊµÅÂºè‰º†Ëæì
     */
    isCurrentlyStreaming() {
        return this.isStreaming;
    }

    /**
     * ÈîÄÊØÅÂÆû‰æã
     */
    destroy() {
        this.closeConnection();
        this.clearTimeout();
        this.isStreaming = false;
    }
}

/**
 * Â∑•ÂÖ∑ÂáΩÊï∞ÔºöÂ§ÑÁêÜÈîÆÁõò‰∫ã‰ª∂
 */
function handleKeyPress(event, callback) {
    if (event.key === 'Enter' && !event.shiftKey) {
        event.preventDefault();
        if (callback) callback();
    }
}

/**
 * Â∑•ÂÖ∑ÂáΩÊï∞ÔºöËé∑ÂèñËæìÂÖ•ÂÄº
 */
function getInputValue(inputId) {
    const input = document.getElementById(inputId);
    return input ? input.value.trim() : '';
}

/**
 * Â∑•ÂÖ∑ÂáΩÊï∞ÔºöÊ∏ÖÁ©∫ËæìÂÖ•
 */
function clearInput(inputId) {
    const input = document.getElementById(inputId);
    if (input) input.value = '';
}

/**
 * Â∑•ÂÖ∑ÂáΩÊï∞ÔºöÊòæÁ§∫ÁªìÊûúÂÆπÂô®
 */
function showResultContainer(containerId, contentId) {
    const container = document.getElementById(containerId);
    const content = document.getElementById(contentId);
    
    if (container) container.style.display = 'block';
    if (content) content.textContent = '';
}

/**
 * Â∑•ÂÖ∑ÂáΩÊï∞ÔºöËé∑ÂèñÊèê‰æõÂïÜ‰ø°ÊÅØ
 */
function getProviderInfo() {
    return fetch('/api/provider-info')
        .then(response => response.json())
        .catch(error => {
            console.log('Ëé∑ÂèñÊèê‰æõÂïÜ‰ø°ÊÅØÂ§±Ë¥•Ôºå‰ΩøÁî®ÈªòËÆ§ÂÄº');
            return { provider: 'ollama' };
        });
}

/**
 * Â∑•ÂÖ∑ÂáΩÊï∞ÔºöÊõ¥Êñ∞Êèê‰æõÂïÜÂæΩÁ´†
 */
function updateProviderBadge(badgeId) {
    getProviderInfo().then(data => {
        const badge = document.getElementById(badgeId);
        if (!badge) return;
        
        if (data.provider === 'ollama') {
            badge.innerHTML = 'üñ•Ô∏è Êú¨Âú∞ Ollama';
            badge.style.background = 'linear-gradient(135deg, #667eea, #764ba2)';
        } else {
            badge.innerHTML = '‚òÅÔ∏è ËøúÁ®ã DeepSeek';
            badge.style.background = 'linear-gradient(135deg, #f093fb, #f5576c)';
        }
    });
}

// ÂØºÂá∫Âà∞ÂÖ®Â±Ä‰ΩúÁî®Âüü
window.AIStreamHandler = AIStreamHandler;
window.AIUtils = {
    handleKeyPress,
    getInputValue,
    clearInput,
    showResultContainer,
    getProviderInfo,
    updateProviderBadge
}; 